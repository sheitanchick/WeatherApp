// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Weather.EntityFramework;

namespace Weather.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Weather.Models.WeatherLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Elapsed")
                        .HasColumnType("interval");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherLogs");
                });

            modelBuilder.Entity("Weather.Models.WeatherLogData", b =>
                {
                    b.Property<long>("WeatherLogId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<float>("Cloudiness")
                        .HasColumnType("real");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureFeelsLike")
                        .HasColumnType("real");

                    b.Property<float>("WindDirection")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("WeatherLogId");

                    b.ToTable("WeatherLogData");
                });

            modelBuilder.Entity("Weather.Models.WeatherLogData", b =>
                {
                    b.HasOne("Weather.Models.WeatherLog", "WeatherLog")
                        .WithOne("Data")
                        .HasForeignKey("Weather.Models.WeatherLogData", "WeatherLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherLog");
                });

            modelBuilder.Entity("Weather.Models.WeatherLog", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
